#!/usr/bin/env ruby

def ok cmd, expect
    actual = %x[./ef hex #{cmd}]
    actual.chomp!

    raise "Command './ef hex #{cmd}' exitted with #{$?.to_i}, expected 0" if $?.to_i != 0

    if actual != expect
        puts "Expected: #{expect}"
        puts "Actual:   #{actual}"
        raise "Wrong output"
    end

    %x[./ef pcap ./out.pcap #{cmd}]
    raise "Command './ef pcap #{cmd}' exitted with #{$?.to_i}, expected 0" if $?.to_i != 0

    puts "OK: #{cmd}"

    #%x[valgrind ./ef hex #{cmd}]
    #raise "Command './ef hex #{cmd}' exitted with #{$?.to_i}, expected 0" if $?.to_i != 0
end

def ok_mask cmd, expect, expect_mask
    actual = %x[./ef hex #{cmd}]
    actual.chomp!
    a = actual.split "\n"

    raise "Command './ef hex #{cmd}' exitted with #{$?.to_i}, expected 0" if $?.to_i != 0

    if a[0] != "DATA: #{expect}"
        puts "Expected: DATA: #{expect}"
        puts "Actual:   #{a[0]}"
        raise "Wrong output: #{cmd}"
    end

    if a[1] != "MASK: #{expect_mask}"
        puts "Expected: MASK: #{expect_mask}"
        puts "Actual:   #{a[1]}"
        raise "Wrong output: #{cmd}"
    end

    %x[./ef pcap ./out.pcap #{cmd}]
    raise "Command './ef pcap #{cmd}' exitted with #{$?.to_i}, expected 0" if $?.to_i != 0

    puts "OK: #{cmd}"

    #%x[valgrind ./ef hex #{cmd}]
    #raise "Command './ef hex #{cmd}' exitted with #{$?.to_i}, expected 0" if $?.to_i != 0
end

%x{rm -f "./out.pcap"}
ok("eth", "ffffffffffff000000000001aaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("eth dmac 0:1::2 smac 123", "00010000000200000000007baaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("eth dmac 1 smac 2 ctag vid 100", "000000000001000000000002810000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("eth dmac 1 smac 2 ctag       pcp 4 vid 0x100 ctag vid 100", "000000000001000000000002810081008100006400000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("eth dmac 1 smac 2 ctag dei 1 pcp 4 vid 0x100 ctag vid 100", "000000000001000000000002810091008100006400000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("eth dmac 1 smac 2 stag dei 1 pcp 4 vid 0x100 ctag vid 100", "00000000000100000000000288a891008100006400000000000000000000000000000000000000000000000000000000000000000000000000000000");

ok("eth dmac 1 smac 2 data pattern cnt 1", "000000000001000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("eth dmac 1 smac 2 data pattern cnt 2", "000000000001000000000002000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("eth dmac 1 smac 2 data pattern cnt 3", "000000000001000000000002000000010200000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("eth dmac 1 smac 2 data pattern cnt 4", "000000000001000000000002000000010203000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("eth dmac 1 smac 2 data pattern cnt 8", "000000000001000000000002000000010203040506070000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("eth dmac 1 smac 2 data pattern cnt 0x20", "0000000000010000000000020000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000000000000000000000000");
ok("eth dmac 1 smac 2 data pattern cnt 0x40", "0000000000010000000000020000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f");

ok("eth dmac 1 smac 2 ipv4 sip 1 dip 10.0.99.2 data pattern cnt 0x40", "000000000001000000000002080045000054000000001f002ea8000000010a006302000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f");
ok("eth dmac 1 smac 2 ipv4 sip 1 dip 10.0.99.2 udp data pattern cnt 0x40", "00000000000100000000000208004500005c000000001f112e8f000000010a006302000000000048ae57000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f");
ok("eth dmac 1 smac 2 ipv4 sip 1 dip 10.0.99.2 udp data ascii \"Hello World!\"", "000000000001000000000002080045000028000000001f112ec3000000010a00630200000000001440d448656c6c6f20576f726c6421000000000000");
ok("eth dmac 1 smac 2 ipv4 sip 1 dip 10.0.99.2 udp data ascii0 \"Hello World!\"", "000000000001000000000002080045000029000000001f112ec2000000010a00630200000000001540d248656c6c6f20576f726c6421000000000000");

ok("data hex 000000000000000000000000080045000028000000001f119bc60000000000000000000000000014add748656c6c6f20576f726c6421000000000000", "000000000000000000000000080045000028000000001f119bc60000000000000000000000000014add748656c6c6f20576f726c6421000000000000");
ok("eth ipv4 udp data ascii \"Hello World!\"", "ffffffffffff000000000001080045000028000000001f119bc60000000000000000000000000014add748656c6c6f20576f726c6421000000000000");

# Ocelot1 short prefix:
ok("sp-oc1 ifh-oc1 bypass 1",
   "8880000a8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("sp-oc1 et 0x1234 id 0x5678 ifh-oc1 bypass 1",
   "123456788000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

# Ocelot1 long prefix:
ok("lp-oc1 ifh-oc1 bypass 1",
   "ffffffffffffffffffffffff8880000a8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("lp-oc1 dmac 01:02:03:04:05:06 smac a1:a2:a3:a4:a5:a6 et 0x5678 id 0x1234 ifh-oc1 bypass 1",
   "010203040506a1a2a3a4a5a6567812348000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

# Ocelot1 injection frame header:
ok("ifh-oc1 eth dmac ff::ff",
   "00000000000000000000000000000000ff00000000ff000000000001aaaa000000000000000000000000000000000000000000000000000000000000");
ok("ifh-oc1 bypass 1 b1-rew-op 0x1ff res1 1",
   "bfe000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-oc1 bypass 1 b1-rew-mac 1 res1 1",
   "c00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-oc1 bypass 0 b0-masq-port 0xf res1 1",
   "3c0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-oc1 bypass 0 b0-masq 1 res1 1",
   "400000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-oc1 rew-val 0xffffffff res2 1 res3 1 res4 0x3f pop-cnt 3 qos-class 7 pcp 7 vid 0xfff",
   "001fffffffe000000000821fb00eefff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-oc1 dest 0xfff src-port 0xf trfm-timer 0xf dp 1 cpuq 0xff tag-type 1 dei 1",
   "000000000000000fff0079e04ff110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

# Ocelot1 extraction frame header:
ok("efh-oc1 eth dmac ff::ff",
   "00000000000000000000000000000000ff00000000ff000000000001aaaa000000000000000000000000000000000000000000000000000000000000");
ok("efh-oc1 res1 1 rew-op 0x1ff llen 0x3f res2 0xffffff acl-id 0x3f sflow-id 0xf dp 1 cpuq 0xff tag-type 1 dei 1",
   "bfe00000001f807ffe0007ef4ff110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("efh-oc1 rew-mac 1 rew-val 0xffffffff wlen 0xff src-port 0xf res3 1 acl-hit 1 lrn-flags 3 qos-class 7 pcp 7 vid 0xfff",
   "401fffffffe07f8000007810b00eefff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

# Jaguar2 short prefix:
ok("sp-jr2 ifh-jr2 ts 0xffffffff",
   "ffffffffffffffffffffffff88800009ffffffff00000000000000008000000000000000000000000000000000000000000000000000000000000000");
ok("sp-jr2 dmac 01:02:03:04:05:06 smac b1:b2:b3:b4:b5:b6 et 0x9876 id 0x5432 ifh-jr2 ts 0xffffffff",
   "010203040506b1b2b3b4b5b698765432ffffffff00000000000000008000000000000000000000000000000000000000000000000000000000000000");

# Jaguar2 long prefix:
ok("lp-jr2 ifh-jr2 ts 0xffffffff",
   "ffffffffffffffffffffffff8100000188800009ffffffff000000000000000080000000000000000000000000000000000000000000000000000000");
ok("lp-jr2 dmac 01:02:03:04:05:06 smac b1:b2:b3:b4:b5:b6 tpid 0x2222 pcp 7 dei 1 vid 0xabe et 0x9876 id 0x5432 ifh-jr2 ts 0xffffffff",
   "010203040506b1b2b3b4b5b62222fabe98765432ffffffff000000000000000080000000000000000000000000000000000000000000000000000000");

# Jaguar2 internal frame header:
ok("ifh-jr2 eth dmac ff::ff",
   "00000000000000000000000080000000000000000000000000000000ff00000000ff000000000001aaaa000000000000000000000000000000000000");
ok("ifh-jr2 ts 0xffffffff de-rt-fwd 1 de-tag-tpid 3 de-gen-idx 0x3ff de-prot-active 1 de-pdu-type 7 de-mpls-ttl 0xff de-mpls-tc 7 de-w16-pop-cnt 0x1f",
   "ffffffff2cffd0380007fb9f800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 de-rsv1 3 de-swap-mac 1 de-rsv2 3 de-gen-idx-mode 1 de-pdu-w16-offset 0x3f de-cl-rslt 0xffff de-mpls-sbit 1 de-type-after-pop 3",
   "00000000d3002fc7fff80460800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 ts 0xffffffff di-dst-port-mask 0x1fffffffffffff",
   "ffffffff001fffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 di-rsv1 0x7ff",
   "00000000ffe0000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 ts 0xffffffff du-erleg 0x7f",
   "ffffffff007f000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 du-rsv1 0x1ff du-next-hop-dmac 11:22:33:44:55:66",
   "00000000ff80112233445566800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 ts 0xffffffff dm-l3mc-grp-idx 0x3ff dm-copy-cnt 0x7f",
   "ffffffff0000000000ffc07f800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 dm-rsv1 0xffffffffff dm-erleg 0x7f",
   "00000000ffffffffff003f80800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 v-rsv1 0 vm0-ac 0xf",
   "000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vm0-rsv1 0x7ff",
   "000000000000000000000000fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 v-rsv1 0 vm1-isdx 0xfff",
   "0000000000000000000000000fff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vm1-cosid 7 v-rsv2 3",
   "000000000000000000000000f000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vq-cl-dp 3 vq-cl-qos 7 v-rsv3 1",
   "000000000000000000000000800037400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vq-sp 1 vq-ingr-drop-mode 1",
   "000000000000000000000000800008800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vg-rsv1 1 vg-lrn-mode 1 v-rsv4 1",
   "000000000000000000000000800000208800000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vg-ttl 0x1f vg-fwd-mode 7",
   "0000000000000000000000008000001f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vdl-dst-port-type 1 vdl-dst-pn 0x1f",
   "00000000000000000000000080000000041f000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vdl-dst-upsid 0x1f",
   "0000000000000000000000008000000003e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vdp-rsv1 1 vdp-dst-pn 0x1f",
   "00000000000000000000000080000000041f000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vdp-dst-upsid 0x1f",
   "0000000000000000000000008000000003e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vdm-rsv1 1",
   "000000000000000000000000800000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vdm-mc-idx 0x3ff",
   "0000000000000000000000008000000003ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vdu-rsv1 1 vdu-rsv2 1",
   "000000000000000000000000800000000410000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vdu-dst-upsid 0x1f vdu-dst-pn 0xf",
   "0000000000000000000000008000000003ef000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vda-rsv1 1 vda-rsv2 0x1f",
   "0000000000000000000000008000000005f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vda-ttl-keep 1 vda-dst-pn 0xf",
   "00000000000000000000000080000000020f000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vdg-rew-cmd 0x7ff",
   "0000000000000000000000008000000007ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vt-cl-pcp 3 vt-cl-vid 0xfff vt-tag-type 1",
   "0000000000000000000000008000000000006fff40000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vt-cl-dei 1 vt-was-tagged 1 vt-ingr-port-type 3",
   "0000000000000000000000008000000000001000b0000000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vs-src-port-type 1 vs10-src-upsid 0x1f",
   "00000000000000000000000080000000000000000be00000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vs-src-port-type 1 vs10-src-upsid 0x1f vs10-src-intpn 0xf",
   "00000000000000000000000080000000000000000bef0000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vs-src-addr-mode 1 vs10-rsv1 1",
   "000000000000000000000000800000000000000004100000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vs00-src-upsid 0x1f",
   "000000000000000000000000800000000000000003e00000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vs00-src-upspn 0x1f",
   "0000000000000000000000008000000000000000001f0000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 vs01-src-glagid 0x3ff",
   "000000000000000000000000800000000000000003ff0000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 f-afi-inj 1 f-es0-isdx-key-ena 1 f-vstax-avail 1 f-rsv3 1 f-sflow-marking 1 f-rx-mirror 1 f-src-port 0x3f",
   "00000000000000000000000080000000000000000000aa29f80000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 f-rsv1 1 f-rsv2 1 f-update-fcs 1 f-dst-mode 7 f-aged 1 f-mirror-probe 3 f-do-not-rew 1",
   "0000000000000000000000008000000000000000000055d6040000000000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 m-pipeline-act 7 m-cpu-mask 0xf q-transp-dscp 1 q-dscp 0x3f",
   "00000000000000000000000080000000000000000000000003803cbf0000000000000000000000000000000000000000000000000000000000000000");
ok("ifh-jr2 m-pipeline-pt 0x1f t-pop-cnt 3 q-update-dscp 1",
   "000000000000000000000000800000000000000000000000007c03400000000000000000000000000000000000000000000000000000000000000000");

# IPv6
ok("eth dmac 1 smac 2 ipv6 sip aaaa::1234 dip bbbb::8.9.10.11 udp data pattern cnt 16",
   "00000000000100000000000286dd600000000018111faaaa0000000000000000000000001234bbbb0000000000000000000008090a0b0000000000183cd0000102030405060708090a0b0c0d0e0f");
ok("eth ipv6 ver 0xf ecn 3 len 0xffff hlim 0xff",
   "ffffffffffff00000000000186ddf0300000ffff11ff0000000000000000000000000000000000000000000000000000000000000000000000000000");
ok("eth ipv6 dscp 0x3f flow 0xfffff  next 0xff",
   "ffffffffffff00000000000186dd6fcfffff0000ff1f0000000000000000000000000000000000000000000000000000000000000000000000000000");

# ICMP
ok("eth ipv4 icmp type 8 hd 0x0004000a data ascii \"Hello World!\"",
   "ffffffffffff000000000001080045000028000000001f019bd600000000000000000800a6020004000a48656c6c6f20576f726c6421000000000000");
ok("eth ipv4 icmp type 0 hd 0x0005000b data ascii \"Hello World!\"",
   "ffffffffffff000000000001080045000028000000001f019bd600000000000000000000ae000005000b48656c6c6f20576f726c6421000000000000");
ok("eth ipv6 icmp type 128 hd 0x00220033 data ascii \"Hello World!\"",
   "ffffffffffff00000000000186dd6000000000143a1f000000000000000000000000000000000000000000000000000000000000000080002d6d0022003348656c6c6f20576f726c6421");
ok("eth ipv6 icmp type 129 hd 0x00230034 data ascii \"Hello World!\"",
   "ffffffffffff00000000000186dd6000000000143a1f000000000000000000000000000000000000000000000000000000000000000081002c6b0023003448656c6c6f20576f726c6421");

# IGMP
ok("eth ipv4 igmp type 0xff ga 0xcafebabe s 1 qqic 0xff",
   "ffffffffffff00000000000108004500001f000000001f029bde0000000000000000ff007242cafebabe08ff00000000000000000000000000000000");
ok("eth ipv4 igmp code 0xff resv 0xff qrv 7 ns 2 data hex 0a.0b.0c.0d:11.22.33.44",
   "ffffffffffff000000000001080045000027000000001f029bd6000000000000000000ff87a500000000f700020a0b0c0d1122334400000000000000");
ok("eth ipv4 igmp type 0x11 code 127 ga 224.0.0.1 ns 2 data hex 0a.0b.0c.0d:11.22.33.44",
   "ffffffffffff000000000001080045000027000000001f029bd60000000000000000117f8e24e00000010000020a0b0c0d1122334400000000000000");
ok("eth ipv4 sip 1.2.3.4 dip 1.2.3.5 igmp type 0x11 code 127 ga 224.0.0.1",
   "ffffffffffff00000000000108004500001f000000001f0293d10102030401020305117f0e7fe0000001000000000000000000000000000000000000");

# TCP
ok("eth ipv4 tcp sport 0xaaaa seqn 0xffffffff doff 0xf urg 1 psh 1 syn 1 win 0xffff urgp 0xffff",
   "ffffffffffff000000000001080045000028000000001f069bd10000000000000000aaaa0000ffffffff00000000f02affff6510ffff000000000000");
ok("eth ipv4 tcp dport 0xbbbb ackn 0xffffffff resv 0x3f ack 1 rst 1 fin 1",
   "ffffffffffff000000000001080045000028000000001f069bd100000000000000000000bbbb00000000ffffffff5fd50000e4540000000000000000");
ok("eth ipv4 tcp sport 0xaaaa dport 0xbbbb data ascii \"Hello World!\"",
   "ffffffffffff000000000001080045000034000000001f069bc50000000000000000aaaabbbb000000000000000050000000f783000048656c6c6f20576f726c6421");
ok("eth ipv6 tcp sport 0xaaaa dport 0xbbbb data ascii \"Hello World!\"",
   "ffffffffffff00000000000186dd600000000020061f0000000000000000000000000000000000000000000000000000000000000000aaaabbbb000000000000000050000000f783000048656c6c6f20576f726c6421");

# Testing ignore masks
ok_mask("eth dmac 1::2 smac 3::4 ipv4 ign udp",
        "01000000000203000000000408004500001c000000001f119bd20000000000000000000000000008ffde000000000000000000000000000000000000",
        "ffffffffffffffffffffffffffff0000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffff")
ok_mask("eth dmac 1::2 smac 3::4 ipv4 ign sip 1.2.3.4 udp",
        "01000000000203000000000408004500001c000000001f1197cc0102030400000000000000000008fbd8000000000000000000000000000000000000",
        "ffffffffffffffffffffffffffff000000000000000000000000ffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffff")
ok_mask("eth dmac 1::2 smac 3::4 ipv4 sip ign udp",
        "01000000000203000000000408004500001c000000001f119bd20000000000000000000000000008ffde000000000000000000000000000000000000",
        "ffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")

#Profinet
ok("eth dmac ::1 smac ::2 ctag pcp 6 profinet-rtc frameid 0x9001 data 80808080004080 cycle 0xc9e0",
   "0000000000010000000000028100c0008892900180808080004080000000000000000000000000000000000000000000000000000000000000000000c9e03500")

ok("eth dmac ::1 smac ::2 profinet-rtc frameid 0x9001 data 80808080004080 cycle 0xc9e0",
   "0000000000010000000000028892900180808080004080000000000000000000000000000000000000000000000000000000000000000000c9e03500")

# CoAP
ok("coap-opt num 11 val hex 74656d7065726174757265",
   "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")

#ok("coap type 0 code 0.01 msgid 0x736a token 7778 coap-opt num 11 val hex 74656d7065726174757265",
#   "4201736a7778bb74656d7065726174757265000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
#
#ok("coap type 0 code 0.01 msgid 0x736a token 7778 coap-opt val hex 74656d7065726174757265 num 11",
#   "4201736a7778bb74656d7065726174757265000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
#
#ok("coap type 0 code 0.01 msgid 0x736a token 7778 coap-opt num 11 val hex 74656d7065726174757265 coap-opt num 1 val hex 00",
#   "4201736a7778bb74656d7065726174757265000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
#
#ok("coap type 0 code 0.01 msgid 0x736a token 7778 coap-opt num 11 val ascii \"Hello World\"",
#   "4201736a7778bb74656d7065726174757265000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
#
#ok("coap type 0 code 0.01 msgid 0x736a token 7778 coap-opt num 11 val cbor {a:3,b:4,c:[1,2,3,4]}",
#   "4201736a7778bb74656d7065726174757265000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
#
#ok("coap type 0 code 0.01 msgid 0x736a token 7778 coap-opt num 11 val 74656d7065726174757265 coap-opt num 0 val 74656d7065726174757265",
#   "4201736a77780b74656d7065726174757265bb74656d7065726174757265000000000000000000000000000000000000000000000000000000000000")

#ok("coap-opt num 4",
#   "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")

